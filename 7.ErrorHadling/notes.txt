// Error Handling in React Router

// In React Router, error handling can be done using:

// Error Boundaries with errorElement (For createBrowserRouter)
// Catch-all Route for 404 Pages
// Using useRouteError() Hook
// 1. Handling Errors with errorElement (For createBrowserRouter)

// In React Router v6.4+, you can define an errorElement for each route to catch errors during navigation, loaders, or actions.

// Example:

import { createBrowserRouter, RouterProvider, useRouteError } from "react-router-dom";

function Home() {
  return <h1>Home Page</h1>;
}

function About() {
  throw new Error("Something went wrong!"); // Simulating an error
}

function ErrorPage() {
  const error = useRouteError(); 
  return (
    <div>
      <h2>Error Occurred!</h2>
      <p>{error.statusText || error.message}</p>
    </div>
  );
}

const router = createBrowserRouter([
  { path: "/", element: <Home /> },
  { path: "/about", element: <About />, errorElement: <ErrorPage /> },
]);

function App() {
  return <RouterProvider router={router} />;
}

export default App;
How It Works:

If an error occurs inside /about, the ErrorPage component will render instead of crashing the app.
The useRouteError() hook gives error details.
2. Catch-All Route for 404 (Not Found) Pages

A fallback route can catch undefined paths.

Example:

const router = createBrowserRouter([
  { path: "/", element: <Home /> },
  { path: "/about", element: <About /> },
  { path: "*", element: <h1>404 - Page Not Found</h1> }, // Catch-all route
]);
If a user enters an invalid URL, they‚Äôll see a "404 - Page Not Found" message.
3. Handling Errors in BrowserRouter (Traditional Routing)

For component-based routing (BrowserRouter), use a global error boundary.

Example:

import { BrowserRouter, Routes, Route } from "react-router-dom";

function ErrorBoundary({ children }) {
  try {
    return children;
  } catch (error) {
    return <h2>Something went wrong!</h2>;
  }
}

function About() {
  throw new Error("Error in About Page!");
}

function App() {
  return (
    <BrowserRouter>
      <ErrorBoundary>
        <Routes>
          <Route path="/" element={<h1>Home</h1>} />
          <Route path="/about" element={<About />} />
          <Route path="*" element={<h1>404 - Not Found</h1>} />
        </Routes>
      </ErrorBoundary>
    </BrowserRouter>
  );
}

export default App;
This is a manual approach for error handling in BrowserRouter.
Which One to Use?

Feature	BrowserRouter	createBrowserRouter
404 Handling	‚úÖ Use <Route path="*">	‚úÖ Use { path: "*", element: <NotFound /> }
Error Boundaries	‚úÖ Manually with try-catch	‚úÖ Built-in with errorElement
Hook for Error	‚ùå Not Available	‚úÖ useRouteError()
üöÄ Use createBrowserRouter if you want built-in error handling with errorElement.

Would you like a more advanced example with loaders and actions handling errors? üòä

=============================================================================


.in BrowserRouter 
The * (asterisk) is called a wildcard route in React Router.
import {BrowserRouter as Router, Routes,Route,Link} from "react-router-dom";

What Does It Do?
It matches all undefined routes that don‚Äôt have a specific <Route> defined.
It's commonly used to create custom 404 pages.
How It Works:
If a user tries to visit a route that isn't defined, React Router renders the component inside <Route path="*">.





export default function App5()
{
    return(
        
    <Router>
        <ul>
            <Link to='/'>Home</Link> |  <Link to='/about'>About</Link> 
        </ul>
        <Routes>
            <Route path='/' element={<Home/>}/>
            <Route path='/about' element={<About/>}/>
            <Route path='*' element={<Error/>}/>
        </Routes>
    </Router>
    );
}
const Home=()=><h1>This is Home Page</h1>
const About=()=><h1>This is About Page</h1>
const Error=()=>
{
    return(
<h1>Error 404 not found</h1>
    );
}

============================================================================

Handling Errors with errorElement (For createBrowserRouter)

//Handling Errors with errorElement (for createBrowserRouter)

import {createBrowserRouter,RouterProvider,useRouteError} from "react-router-dom";

const router = createBrowserRouter([

    { path: "/", element: <Home /> },
    { path: "/about", element: <About /> },
    { path: "*", element: <h1>404 - Page Not Found</h1> },
]);
export default function App5()
{
    return <RouterProvider router={router}/>}

function Home() {
    return <h1>Home Page</h1>;}
  function About() {
    return <h1>About Page</h1>;}

=========================================================================